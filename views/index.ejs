<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
        integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
        crossorigin="" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            width: 100%;
            height: 100vh;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
        integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
        crossorigin=""></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        var map_init = L.map('map', {
            center: [20, 70],
            zoom: 5
        });
        var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map_init);
        L.Control.geocoder().addTo(map_init);
        
        const socket = new WebSocket('ws://localhost:8080');
        var lat, long, acc, marker, circle, recMes;

        socket.addEventListener('message', function(event) {
            console.log('Message from server ', event.data);
            recMes = JSON.parse(event.data);
        });

        if (!navigator.geolocation) {
            console.log("Your browser doesn't support geolocation feature!")
        } else {
            setInterval(() => {
                socket.send(`SERVER`);
                navigator.geolocation.getCurrentPosition(updatePosition)
            }, 5000);
        };

        function updatePosition(position) {
            if (marker) {
                map_init.removeLayer(marker)
            }

            if (circle) {
                map_init.removeLayer(circle)
            }
            if (recMes != undefined) {
                for( const i in recMes ) {
                    // map_init.removeLayer(marker);
                    marker = L.marker([parseFloat(recMes[i].lat), parseFloat(recMes[i].long)]).addTo(map_init).bindPopup(recMes[i].name);
                }
            }
            // // marker = L.marker([lat, long])
            // marke2 = L.marker([23.19, 72.67]).addTo(map_init).bindPopup('Test').openPopup();
            // marke2 = L.marker([23.19, 72.69]).addTo(map_init).bindPopup('Test').openPopup();
            // marke2 = L.marker([23.19, 72.71]).addTo(map_init).bindPopup('Test').openPopup();
            // marke2 = L.marker([23.19, 72.65]).addTo(map_init).bindPopup('Test').openPopup();
            // circle = L.circle([lat, long], { radius: acc })

            // var featureGroup = L.featureGroup([marker, circle]).addTo(map_init)

            // map_init.fitBounds(featureGroup.getBounds())
        }
    </script>
</body>

</html>